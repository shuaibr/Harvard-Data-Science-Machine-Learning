summary(read_mnist())
mnist<-read_mnist()
dim(mnist)
dim(mnist$train)
dim(mnist$train$images)
dim(mnist$test$images)
clear
library(caret)
library(dslabs)
library(tidyverse)
data(heights)
y<-heights$sex
x<-heights$height
set.seed(207)
test_index <- createDataPartition(y, times = 1, p = 0.5, list =FALSE)
test_set <- heights[test_index,]
train_set <- heights[-test_index,]
best_cutoff<-64
y_hat <-ifelse(test_set$height > best_cutoff, "Male", "Female") %>% factor(levels = levels(test_set$sex))
y_hat <-factor(y_hat)
mean(y_hat == test_set$sex)
table(predicted = y_hat, actual = test_set$sex)
test_set %>% mutate(y_hat = y_hat) %>% group_by(sex) %>% summarize(accuracy = mean(y_hat == sex))
prev <- mean(y == "Male")
prev
cofusionMatrix(data = y_hat, reference = test_set$sex)
confusionMatrix(data = y_hat, reference = test_set$sex)
cutoff <- seq(61,70)
F_1 <- map_dbl(cutoff, function(x)){
y_hat <- ifelse(train_set$height > x, "Male", "Female") %>% factor(levels = levels(test_set$sex))
F_meas(data - y_hat, reference = factor(train_set$sex))
})
F_1 <- map_dbl(cutoff, function(x){
y_hat <- ifelse(train_set$height > x, "Male", "Female") %>%
factor(levels = levels(test_set$sex))
F_meas(data = y_hat, reference = factor(train_set$sex))
})
max(F_1)
best_cutoff<-cutoff[which.max(F_1)]
y_hat <- ifelse(test_set$height > best_cutoff, "Male", "Female") %>%
factor(levels = levels(test_set$sex))
sensitivity(data = y_hat, reference = test_set$sex)
specificity(data = y_hat, reference = test_set$sex)
best_cutoff
mean(y_hat == test_set$sex)
p <- 0.9
n <- length(test_index)
n
y_hat <- sample(c("Male", "Female"), n, replace = TRUE, prob=c(p, 1-p)) %>%
factor(levels = levels(test_set$sex))
mean(y_hat == test_set$sex)
probs <- seq(0, 1, length.out = 10)
guessing <- map_df(probs, function(p){
y_hat <-
sample(c("Male", "Female"), n, replace = TRUE, prob=c(p, 1-p)) %>%
factor(levels = c("Female", "Male"))
list(method = "Guessing",
FPR = 1 - specificity(y_hat, test_set$sex),
TPR = sensitivity(y_hat, test_set$sex))
})
guessing %>% qplot(FPR, TPR, data =., xlab = "1 - Specificity", ylab = "Sensitivity")
cutoffs <- c(50, seq(60, 75), 80)
height_cutoff <- map_df(cutoffs, function(x){
y_hat <- ifelse(test_set$height > x, "Male", "Female") %>%
factor(levels = c("Female", "Male"))
list(method = "Height cutoff",
FPR = 1-specificity(y_hat, test_set$sex),
TPR = sensitivity(y_hat, test_set$sex))
})
bind_rows(guessing, height_cutoff) %>%
ggplot(aes(FPR, TPR, color = method)) +
geom_line() +
geom_point() +
xlab("1 - Specificity") +
ylab("Sensitivity")
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
map_df(cutoffs, function(x){
y_hat <- ifelse(test_set$height > x, "Male", "Female") %>%
factor(levels = c("Female", "Male"))
list(method = "Height cutoff",
cutoff = x,
FPR = 1-specificity(y_hat, test_set$sex),
TPR = sensitivity(y_hat, test_set$sex))
}) %>%
ggplot(aes(FPR, TPR, label = cutoff)) +
geom_line() +
geom_point() +
geom_text_repel(nudge_x = 0.01, nudge_y = -0.01)
guessing <- map_df(probs, function(p){
y_hat <- sample(c("Male", "Female"), length(test_index),
replace = TRUE, prob=c(p, 1-p)) %>%
factor(levels = c("Female", "Male"))
list(method = "Guess",
recall = sensitivity(y_hat, test_set$sex),
precision = precision(y_hat, test_set$sex))
})
height_cutoff <- map_df(cutoffs, function(x){
y_hat <- ifelse(test_set$height > x, "Male", "Female") %>%
factor(levels = c("Female", "Male"))
list(method = "Height cutoff",
recall = sensitivity(y_hat, test_set$sex),
precision = precision(y_hat, test_set$sex))
})
bind_rows(guessing, height_cutoff) %>%
ggplot(aes(recall, precision, color = method)) +
geom_line() +
geom_point()
guessing <- map_df(probs, function(p){
y_hat <- sample(c("Male", "Female"), length(test_index), replace = TRUE,
prob=c(p, 1-p)) %>%
factor(levels = c("Male", "Female"))
list(method = "Guess",
recall = sensitivity(y_hat, relevel(test_set$sex, "Male", "Female")),
precision = precision(y_hat, relevel(test_set$sex, "Male", "Female")))
})
height_cutoff <- map_df(cutoffs, function(x){
y_hat <- ifelse(test_set$height > x, "Male", "Female") %>%
factor(levels = c("Male", "Female"))
list(method = "Height cutoff",
recall = sensitivity(y_hat, relevel(test_set$sex, "Male", "Female")),
precision = precision(y_hat, relevel(test_set$sex, "Male", "Female")))
})
bind_rows(guessing, height_cutoff) %>%
ggplot(aes(recall, precision, color = method)) +
geom_line() +
geom_point()
library(dslabs)
library(dplyr)
library(lubridate)
data(reported_heights)
dat <- mutate(reported_heights, date_time = ymd_hms(time_stamp)) %>%
filter(date_time >= make_date(2016, 01, 25) & date_time < make_date(2016, 02, 1)) %>%
mutate(type = ifelse(day(date_time) == 25 & hour(date_time) == 8 & between(minute(date_time), 15, 30), "inclass","online")) %>%
select(sex, type)
y <- factor(dat$sex, c("Female", "Male"))
x <- dat$type
y
x
View(dat)
prop(type)
prop.table(dat)
mean(dat$type == "inclass" && dat$sex == "Female")
mean(dat$type == "inclass")
mean(dat$sex == "Female")
prop.test(table(dat$sex, dat$type))
prop.test(table(dat$sex="Female", dat$type))
prop.test(table(dat$type, dat$sex))
y_hat <- ifelse(dat$type = "Inclass" ,"Male","Female") %>% factor(levels = levels(test_set$sex))
y_hat <- ifelse(dat$type == "Inclass" ,"Male","Female") %>% factor(levels = levels(test_set$sex))
mean(dat$sex = y_hat)
mean(dat$sex == y_hat)
y_hat <- ifelse(dat$type == "Inclass" ,"Male","Female") %>% factor(levels = levels(dat$sex))
mean*dat$sex == y_hat
mean(dat$sex == y_hat)
dat$type %>% group_by(dat$sex) %>% summarize(mean(dat$type),sd(dat$type))
dat$type %>% group_by(sex) %>% summarize(mean(dat$type),sd(dat$type))
y_hat <- ifelse(dat$type == "Inclass", "Female" ,"Male") %>% factor(levels = levels(dat$sex))
mean(dat$sex == y_hat)
y_hat
y_hat <- ifelse(dat$type == "inclass", "Female" ,"Male") %>% factor(levels = levels(dat$sex))
y_hat
y<-dat$sex
x<-dat$type
y_hat<-ifelse(y=="inclass","Female", "Male") %>% factor(levels = levels(dat$sex))
y_hat
y
y_hat<-ifelse(x=="inclass","Female", "Male") %>% factor(levels = levels(dat$sex))
y_hat
y_hat<-ifelse(x=="inclass","Female", "Male")
y_hat
y
mean(y == y_hat)
function(y_hat, y)
function(y, y_hat)
function(a, b){result <- a/(a+b)}
table(function(y, y_hat))
table(dat, function(y, y_hat))
confusionMatrix(y, y_hat)
table(y_hat, y)
table(y, y_hat)
library(caret)
sensitivity(y_hat, y)
sensitivity(y_hat)
sensitivity(as.factor(y_hat),as.factor(y)
sensitivity(as.factor(y_hat)
as.factor(y))
pred <- factor(y_hat)
act<- factor(y)
sensitivity(pred, act)
specificity(pred, act)
mean(dat$sex == "Female")
data(iris)
iris <- iris[-which(iris$Species=='setosa'),]
y <- iris$Species
set.seed(2)    # if using R 3.6 or later, use set.seed(2, sample.kind="Rounding")
test <- iris[test_index,]
train <- iris[-test_index,]
cutoff <- seq(range(iris$Sepal.Length))
cutoff
max(map_dbl(cutoff, function(x){y_hat <-ifelse(train$Sepal.Length)})
cutoff<-seq(range(iris$Sepal.Length),0.1)
cutoff<-seq(range(iris$Sepal.Length),from =0.1)
cutoff<-seq(range(iris$Sepal.Length),by=0.1)
cutoff<-seq(1,2,by=0.1)
cutoff
accuracy <- map_dbl(cutoff, function(x){
+     y_hat <- ifelse(train_set$height > x, "Male", "Female") %>%
+         factor(levels = levels(test_set$sex))
+     mean(y_hat == train_set$sex)
+ })
head(irus)
head(iris)
percentage <- prop.table(table(iris$Species)) * 100
cbind(freq=table(irus$Specis), percentage = percentage)
cbind(freq=table(iris$Species), percentage = percentage)
levels(iris$Species)
iris$Species
summary(irius)
summary(iris)
for (feature in iris){
print(max(map_dbl(seq(min(feature),max(feature),by =0.1), function(x){
+     y_hat <- ifelse(feature > x, "virginica", "versicolor") %>%
+         factor(levels = levels(iris$Species))
+     mean(y_hat == iris$Species)
+ })
))
}
for (feature in iris){print(feature)}
for (feature in iris){print(levels(feature))}
for (feature in iris){print(seq(min(feature),max(feature),by=0.1))}
for (feature in iris[:-2]){print(seq(min(feature),max(feature),by=0.1))}
for (feature in iris[0:2]){print(seq(min(feature),max(feature),by=0.1))}
for (feature in iris[0:3]){print(seq(min(feature),max(feature),by=0.1))}
for (feature in iris[0:4]){print(seq(min(feature),max(feature),by=0.1))}
for (feature in iris[0:5]){print(seq(min(feature),max(feature),by=0.1))}
for (feature in iris[0:4]){print(seq(min(feature),max(feature),by=0.1),function(x){
y_hat<-ifelse(train$feature>x,"virginica","versicolor") %>% factor(levels = levels(test$Species))+mean(y_hat == train$Species)
})}
for (feature in iris[0:4]){print(seq(min(feature),max(feature),by=0.1))}
for (feature in iris[0:4]){print(seq(min(feature),max(feature),by=0.1),function(x){
print(x)
})}
for (feature in iris[0:4]){print(cutoff<-seq(min(feature),max(feature),by=0.1),function(x){
y_hat<-ifelse(train$feature>x,"virginica","versicolor") %>% factor(levels = levels(test$Species))+mean(y_hat == train$Species)
})}
for (feature in iris[0:4]){print(as.numeric(cutoff)<-seq(min(feature),max(feature),by=0.1),function(x){
y_hat<-ifelse(train$feature>x,"virginica","versicolor") %>% factor(levels = levels(test$Species))+mean(y_hat == train$Species)
})}
for (feature in iris[0:4]){print(seq(min(feature),max(feature),by=0.1),function(as.numeric(x)){
print(x)
})}
for (feature in iris[0:4]){print(max(map_dbl(as.numeric(cutoff)<-seq(min(feature),max(feature),by=0.1),function(x){
y_hat<-ifelse(train$feature>x,"virginica","versicolor") %>% factor(levels = levels(test$Species))+mean(y_hat == train$Species)
})))}
library(tidyverse)
for (feature in iris[0:4]){print(max(map_dbl(as.numeric(cutoff)<-seq(min(feature),max(feature),by=0.1),function(x){
y_hat<-ifelse(train$feature>x,"virginica","versicolor") %>% factor(levels = levels(test$Species))+mean(y_hat == train$Species)
})))}
for (feature in iris[0:4]){print(max(map_dbl(cutoff<-seq(min(feature),max(feature),by=0.1),function(x){
y_hat<-ifelse(train$feature>x,"virginica","versicolor") %>% factor(levels = levels(test$Species))+mean(y_hat == train$Species)
})))}
for (i in 0:4){print(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by=0.1),function(x){
y_hat<-ifelse(train[i]>x,"virginica","versicolor") %>% factor(levels = levels(test$Species))+mean(y_hat == train$Species)
})))}
iris[0]
iris[1]
for (i in 1:4){print(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by=0.1),function(x){
y_hat<-ifelse(train[i]>x,"virginica","versicolor") %>% factor(levels = levels(test$Species))+mean(y_hat == train$Species)
})))}
for (i in 1:4){print(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by=0.1),function(x){
y_hat<-ifelse(train[i]>x,"virginica","versicolor") %>% factor(levels = levels(train$Species))+mean(y_hat == train$Species)
})))}
for (i in 1:4){print(cutoff<-seq(min(iris[i]),max(iris[i]),by=0.1))}
for (i in 1:4){print(max(cutoff<-seq(min(iris[i]),max(iris[i]),by=0.1)))}
cutoff<- seq(min(iris[0]),max(iris[0]),by=0.1)
cutoff<- seq(min(iris[1]),max(iris[1]),by=0.1)
cutoff
accuracy<-map_dbl(cutoff,function(x){y_hat<-ifelse(train[1]>x,"virginica","versicolor") %>% factor(levels = levels(test$Species)) mean(y_hat == test$Species)})
accuracy<-map_dbl(cutoff,function(x){y_hat<-ifelse(train[1]>x,"virginica","versicolor") %>% factor(levels = levels(test$Species))+ mean(y_hat == test$Species)})
accuracy<-map_dbl(cutoff,function(x){y_hat<-ifelse(train[1]>x,"virginica","versicolor") %>% factor(levels = levels(test$Species)) ,mean(y_hat == test$Species)})
accuracy<-map_dbl(cutoff,function(x){y_hat<-ifelse(train[1]>x,"virginica","versicolor") %>% factor(levels = levels(test$Species))})
accuracy<-map_dbl(cutoff,function(x){
y_hat<-ifelse(train[1]>x,"virginica","versicolor")
%>% factor(levels = levels(test$Species)) result<-mean(y_hat == test$Species)})
accuracy<-map_dbl(cutoff,function(x){
y_hat<-ifelse(train[1]>x,"virginica","versicolor")%>% factor(levels = levels(test$Species)) result<-mean(y_hat == test$Species)})
accuracy<-map_dbl(cutoff,function(x){
y_hat<-ifelse(train[1]>x,"virginica","versicolor")%>% factor(levels = levels(test$Species)) result<-mean(y_hat == test$Species)})
accuracy<-map_dbl(cutoff,function(x){
y_hat<-ifelse(test[1]>x, "virginica", "versicolor")
%>% factor(levels = levels(test$Species))
accuracy<-map_dbl(cutoff,function(x){
y_hat<-ifelse(test[1]>x, "virginica", "versicolor")%>%
factor(levels = levels(test$Species))
mean(y_hat == test$Species)})
accuracy
test[1]
test$Sepal.Length
y
set.seed(2)
test_index <- createDataPartition(y, times = 1, p=0.5, list = FALSE)
test<- iris[test_index,]
train <- [-test_index,]
train <- iris[-test_index,]
test
train
accuracy<-map_dbl(cutoff,function(x){
y_hat<-ifelse(test[1]>x, "virginica", "versicolor")%>%
factor(levels = levels(test$Species))
mean(y_hat == test$Species)})
accuracy
max(accuracy)
for (i in 1:4){}
for (i in 1:4){
print(max
map_dbl(seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){
+ y_hat<-ifelse(test[i]>x, "virginica", "versicolor")%>%
+ factor(levels = levels(test$Species))
+ mean(y_hat == test$Species)}))}
for (i in 1:4){
print(max
map_dbl()
for (i in 1:4){
print(max
map_dbl(seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){
for (i in 1:4){
print(max
map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){
for (i in 1:4){
print(max(
map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){
y_hat<-ifelse(test[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(test$Species))
mean(y_hat == test$Species)}))}
for (i in 1:4){
print(max(
map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){
y_hat<-ifelse(test[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(test$Species))
mean(y_hat == test$Species)}))}
for (i in 1:4){
print(max(
map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){
y_hat<-ifelse(test[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(test$Species))
mean(y_hat == test$Species)})))}
summary(iris)
cutoff<-seq(min(iris$Length),max(iris$Length),by=0.1)
cutoff<-seq(min(iris$Petal.Length),max(iris$Petal.Length),by=0.1)
cutoff
accuracy<-map_dbl(cutoff,function(x){
+ y_hat<-ifelse(test$Petal.Length>x, "virginica", "versicolor")%>%
+ factor(levels = levels(test$Species))
+ mean(y_hat == test$Species)})
accuracy<-map_dbl(cutoff,function(x){
y_hat<-ifelse(test$Petal.Length>x, "virginica", "versicolor")%>%
factor(levels = levels(test$Species))
mean(y_hat == test$Species)})
max(accuracy)
best_cutoff <- cutoff[which.max(accuracy)]
best_cutoff
y_hat <- ifelse(test$Petal.Length > best_cutoff, "virginica", "versicolor") %>% factor(levels = levels(test$Petal.Length))
mean(y_hat == test$Species)
y_hat<-factor(y_hat)
mean(y_hat == test$Species)
y_hat <- ifelse(test$Petal.Length > best_cutoff, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
y_hat<-factor(y_hat)
mean(y_hat == test$Species)
y_hat
test$Species
y_hat <- factor(y_hat, levels = levels(y_hat))
mean(y_hat == test$Species)
y_hat <- factor(y_hat, levels = levels(test$Species))
mean(y_hat == test$Species)
for (i in 1:4){print(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(test[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(train$Species))
mean(y_hat == train$Species)})))}
y_hat <- ifelse(test$Petal.Length > 4.9, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
y_hat
mean(y_hat == test$Species)
confusionMatrix(y_hat, test$Species)
for (i in 1:4){print(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(test[i]>x, "virginica", "versicolor")%>%
for (i in 1:4){print(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(train[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(train$Species))
mean(y_hat == train$Species)})))}
for (i in 1:4){print(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(test[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(test$Species))
mean(y_hat == test$Species)})))}
View(iris)
names(iris[1])
for (i in 1:4) { print( names[iris[i]])}
for (i in 1:4) { print( names(iris[i])}
for (i in 1:4) { print( names(iris[i]))}
for (i in 1:4){print(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(test[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(test$Species))
mean(y_hat == test$Species)})),names(iris[i]))}
for (i in 1:4){print(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(test[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(test$Species))
mean(y_hat == test$Species)}))+names(iris[i]))}
for (i in 1:4){cat(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(test[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(test$Species))
mean(y_hat == test$Species)})), names(iris[i]))}
plot(iris,pch=21,bg=iris$Species)
cutL <- seq(min(train$Petal.Length),max(train$Petal.Length),by=0.1)
cutW <- seq(min(train$Petal.Width),max(train$Petal.Width),by=0.1)
cutL
bestL <- cutL[which.max(0.92)]
bestW <- cutW[which.max(0.94)]
bestL <- cutL[which.max(0.94)]
bestW <- cutW[which.max(0.92)]
y_hat <- ifelse(test$Petal.Length > bestL || test$Petal.Width > bestW, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
y_hat <- ifelse(test$Petal.Length > bestW || test$Petal.Width > bestL, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
bestL
bestW
accuracy
bestL <- cutL[which.max(0.96)]
bestW <- cutW[which.max(0.98)]
bestL
bestW
cutL
accuracy
for (i in 1:4){cat(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(test[i]>x, "virginica", "versicolor")%>%
for (i in 1:4){cat(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(train[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(train$Species))
mean(y_hat == train$Species)})
for (i in 1:4){cat(max(accuracy<-map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(train[i]>x, "virginica", "versicolor")%>%
for (i in 1:4){cat(max(accuracy<-map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(train[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(train$Species))
mean(y_hat == train$Species)})),names, cutoff[which.max(accuracy)],"\n")}
for (i in 1:4){cat(max(accuracy<-map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(train[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(train$Species))
mean(y_hat == train$Species)})),names, cutoff[which.max(accuracy)])}
for (i in 1:4){cat(max(accuracy<-map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(train[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(train$Species))
mean(y_hat == train$Species)})),names}
for (i in 1:4){cat(max(accuracy<-map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(train[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(train$Species))
mean(y_hat == train$Species)})),names)}
for (i in 1:4){cat(max(accuracy<-map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(train[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(train$Species))
for (i in 1:4){cat(max(map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(train[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(train$Species))
mean(y_hat == train$Species)})),names)}
for (i in 1:4){cat(max(accuracy <- map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(test[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(test$Species))
mean(y_hat == test$Species)})), names(iris[i]))}
for (i in 1:4){cat(max(accuracy <- map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(train[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(train$Species))
mean(y_hat == train$Species)})), cutoff[which.max(accuracy)],names(iris[i]))}
for (i in 1:4){cat(max(accuracy <- map_dbl(cutoff<-seq(min(iris[i]),max(iris[i]),by = 0.1),function(x){y_hat<-ifelse(train[i]>x, "virginica", "versicolor")%>%
factor(levels = levels(train$Species))
mean(y_hat == train$Species)})), " ", cutoff[which.max(accuracy)]," ", names(iris[i]), " \n")}
y_hat <- ifelse(test$Petal.Length > 4.7 || test$Petal.Width > 1.7, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
test$Petal.Length > 4.7
test$Petal.Length > 4.7 || test$Petal.Width > 1.7
y_hatL <- ifelse(test$Petal.Length > 4.7, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
y_hatW <- ifelse(test$Petal.Width > 1.7, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
y_hat <- ifelse(y_hatL == y_hatW, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
y_hat
mean(y_hat, test$Species)
mean(y_hat == test$Species)
test$Species
y_hat <- ifelse(test$Petal.Length > 4.7 && test$Petal.Width > 1.7, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
test$Species
y_hat
y_hat <- ifelse(test$Petal.Length > 4.7 | test$Petal.Width > 1.7, "virginica", "versicolor") %>% factor(levels = levels(test$Species))
mean(y_hat == test$Species)
set.seed(1)
disease <- sample(c(0,1), size=1e6, replace=TRUE, prob=c(0.98,0.02))
test <- rep(NA, 1e6)
test[disease==0] <- sample(c(0,1), size=sum(disease==0), replace=TRUE, prob=c(0.90,0.10))
test[disease==1] <- sample(c(0,1), size=sum(disease==1), replace=TRUE, prob=c(0.15, 0.85))
test
mean(test == 1)
test[disease == 0]
mean(test[disease == 1]==0)
disease
mean(test[disease == 1] == 0)
library(dslabs)
data("heights")
heights %>%
mutate(height = round(height)) %>%
group_by(height) %>%
summarize(p = mean(sex == "Male")) %>%
qplot(height, p , data = .)
ps <- seq(0,1,0.1)
heights %>%
mutate(g = cut(height, quantile(height, ps), include.lowest = TRUE))%>%
qplot(height, p, data =.)
library(MASS)
Sigma <- 9*matrix(c(1,0.5,0.5,1), 2,2)
dat <- MASS::mvrnorm(n= 10000, c(69,69), Sigma)%>% data.frame() %>% setNames(c("x","y")
dat <- MASS::mvrnorm(n = 10000, c(69, 69), Sigma) %>%
data.frame() %>% setNames(c("x", "y"))
plot(dat)
ps <- seq(0,1,0.1)
dat %>% mutate( g = cut(x, quantile(x,ps), include.lowest = TRUE)) %>%
group_by(g) %>%
summarize(y = mean(y), x= mean(x)) %>%
qplot(x,y,data=.)
mean(test = 1)
mean(test == 1)
test == 1
mean(test)
mean(test == 0)
savehistory("~/GitHub/Harvard-Data-Science-Machine-Learning/Machine Learning Basics/conditional_probabilities.Rhistory")
